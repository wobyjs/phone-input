import { Observable, CSSProperties, type JSX, ObservableMaybe } from 'woby';
import './utils/prototypes';
import '../dist/output.css';
import { Country } from './Country';
import { getCountryData } from './utils';
interface PhoneInputProps {
    country?: ObservableMaybe<string | number>;
    value?: Observable<string>;
    onlyCountries?: Observable<Country[]>;
    preferredCountries?: Observable<Country[]>;
    excludeCountries?: ObservableMaybe<string[]>;
    placeholder?: ObservableMaybe<string>;
    searchPlaceholder?: ObservableMaybe<string>;
    searchNotFound?: ObservableMaybe<string>;
    disabled?: ObservableMaybe<boolean>;
    containerStyle?: ObservableMaybe<CSSProperties>;
    inputStyle?: ObservableMaybe<CSSProperties>;
    buttonStyle?: ObservableMaybe<CSSProperties>;
    dropdownStyle?: ObservableMaybe<CSSProperties>;
    searchStyle?: ObservableMaybe<CSSProperties>;
    containerClass?: ObservableMaybe<string>;
    inputClass?: ObservableMaybe<string>;
    buttonClass?: ObservableMaybe<string>;
    dropdownClass?: ObservableMaybe<string>;
    searchClass?: ObservableMaybe<string>;
    className?: ObservableMaybe<string>;
    autoFormat?: ObservableMaybe<boolean>;
    enableAreaCodes?: ObservableMaybe<boolean | string[]>;
    enableTerritories?: ObservableMaybe<boolean | string[]>;
    disableCountryCode?: ObservableMaybe<boolean>;
    disableDropdown?: ObservableMaybe<boolean>;
    enableLongNumbers?: ObservableMaybe<boolean | number>;
    countryCodeEditable?: ObservableMaybe<boolean>;
    enableSearch?: ObservableMaybe<boolean>;
    disableSearchIcon?: ObservableMaybe<boolean>;
    disableInitialCountryGuess?: ObservableMaybe<boolean>;
    disableCountryGuess?: ObservableMaybe<boolean>;
    regions?: ObservableMaybe<string | string[]>;
    inputProps?: ObservableMaybe<{
        ref?: JSX.Ref;
    }>;
    localization?: ObservableMaybe<Record<string, string>>;
    masks?: ObservableMaybe<object>;
    areaCodes?: ObservableMaybe<string>;
    preserveOrder?: ObservableMaybe<string[]>;
    defaultMask?: ObservableMaybe<string>;
    alwaysDefaultMask?: ObservableMaybe<boolean>;
    prefix?: Observable<string>;
    copyNumbersOnly?: ObservableMaybe<boolean>;
    renderStringAsFlag?: ObservableMaybe<string>;
    autocompleteSearch?: ObservableMaybe<boolean>;
    jumpCursorToEnd?: ObservableMaybe<boolean>;
    priority?: ObservableMaybe<number>;
    enableAreaCodeStretch?: ObservableMaybe<boolean>;
    enableClickOutside?: ObservableMaybe<boolean>;
    showDropdown?: ObservableMaybe<boolean>;
    onChange?: (formattedNumber: string, country: ReturnType<typeof getCountryData>, num: string) => void;
    onFocus?: (...args: any[]) => void;
    onBlur?: (...args: any[]) => void;
    onClick?: (...args: any[]) => void;
    onKeyDown?: (...args: any[]) => void;
    onEnterKeyPress?: (...args: any[]) => void;
    onMount?: (formattedNumber: string, countryData: any, fullNumber: string) => void;
    isValid?: ObservableMaybe<boolean> | ((value: string, selectedCountry: Country, onlyCountries: Country[], hiddenAreaCodes: string[]) => boolean | string);
    defaultErrorMessage?: ObservableMaybe<string>;
    specialLabel?: ObservableMaybe<string>;
    style?: JSX.Style;
}
export declare const PhoneInput: (propertis: PhoneInputProps) => any;
export {};
//# sourceMappingURL=index.d.ts.map